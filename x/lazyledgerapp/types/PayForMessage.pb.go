// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lazyledgerapp/PayForMessage.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PayForMessage struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                 string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxType             uint32 `protobuf:"varint,3,opt,name=TxType,proto3" json:"TxType,omitempty"`
	TxFee              uint64 `protobuf:"varint,4,opt,name=TxFee,proto3" json:"TxFee,omitempty"`
	Nonce              uint64 `protobuf:"varint,5,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	MsgNamespaceID     []byte `protobuf:"bytes,6,opt,name=MsgNamespaceID,proto3" json:"MsgNamespaceID,omitempty"`
	MsgSize            uint64 `protobuf:"varint,7,opt,name=MsgSize,proto3" json:"MsgSize,omitempty"`
	MsgShareCommitment []byte `protobuf:"bytes,8,opt,name=MsgShareCommitment,proto3" json:"MsgShareCommitment,omitempty"`
}

func (m *PayForMessage) Reset()         { *m = PayForMessage{} }
func (m *PayForMessage) String() string { return proto.CompactTextString(m) }
func (*PayForMessage) ProtoMessage()    {}
func (*PayForMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_aed08664803ce2f6, []int{0}
}
func (m *PayForMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayForMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayForMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayForMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayForMessage.Merge(m, src)
}
func (m *PayForMessage) XXX_Size() int {
	return m.Size()
}
func (m *PayForMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PayForMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PayForMessage proto.InternalMessageInfo

func (m *PayForMessage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PayForMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PayForMessage) GetTxType() uint32 {
	if m != nil {
		return m.TxType
	}
	return 0
}

func (m *PayForMessage) GetTxFee() uint64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

func (m *PayForMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *PayForMessage) GetMsgNamespaceID() []byte {
	if m != nil {
		return m.MsgNamespaceID
	}
	return nil
}

func (m *PayForMessage) GetMsgSize() uint64 {
	if m != nil {
		return m.MsgSize
	}
	return 0
}

func (m *PayForMessage) GetMsgShareCommitment() []byte {
	if m != nil {
		return m.MsgShareCommitment
	}
	return nil
}

type MsgCreatePayForMessage struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TxType             uint32 `protobuf:"varint,2,opt,name=TxType,proto3" json:"TxType,omitempty"`
	TxFee              uint64 `protobuf:"varint,3,opt,name=TxFee,proto3" json:"TxFee,omitempty"`
	Nonce              uint64 `protobuf:"varint,4,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	MsgNamespaceID     []byte `protobuf:"bytes,5,opt,name=MsgNamespaceID,proto3" json:"MsgNamespaceID,omitempty"`
	MsgSize            uint64 `protobuf:"varint,6,opt,name=MsgSize,proto3" json:"MsgSize,omitempty"`
	MsgShareCommitment []byte `protobuf:"bytes,7,opt,name=MsgShareCommitment,proto3" json:"MsgShareCommitment,omitempty"`
}

func (m *MsgCreatePayForMessage) Reset()         { *m = MsgCreatePayForMessage{} }
func (m *MsgCreatePayForMessage) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePayForMessage) ProtoMessage()    {}
func (*MsgCreatePayForMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_aed08664803ce2f6, []int{1}
}
func (m *MsgCreatePayForMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePayForMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePayForMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePayForMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePayForMessage.Merge(m, src)
}
func (m *MsgCreatePayForMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePayForMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePayForMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePayForMessage proto.InternalMessageInfo

func (m *MsgCreatePayForMessage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreatePayForMessage) GetTxType() uint32 {
	if m != nil {
		return m.TxType
	}
	return 0
}

func (m *MsgCreatePayForMessage) GetTxFee() uint64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

func (m *MsgCreatePayForMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgCreatePayForMessage) GetMsgNamespaceID() []byte {
	if m != nil {
		return m.MsgNamespaceID
	}
	return nil
}

func (m *MsgCreatePayForMessage) GetMsgSize() uint64 {
	if m != nil {
		return m.MsgSize
	}
	return 0
}

func (m *MsgCreatePayForMessage) GetMsgShareCommitment() []byte {
	if m != nil {
		return m.MsgShareCommitment
	}
	return nil
}

type MsgUpdatePayForMessage struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                 string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxType             uint32 `protobuf:"varint,3,opt,name=TxType,proto3" json:"TxType,omitempty"`
	TxFee              uint64 `protobuf:"varint,4,opt,name=TxFee,proto3" json:"TxFee,omitempty"`
	Nonce              uint64 `protobuf:"varint,5,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	MsgNamespaceID     []byte `protobuf:"bytes,6,opt,name=MsgNamespaceID,proto3" json:"MsgNamespaceID,omitempty"`
	MsgSize            uint64 `protobuf:"varint,7,opt,name=MsgSize,proto3" json:"MsgSize,omitempty"`
	MsgShareCommitment []byte `protobuf:"bytes,8,opt,name=MsgShareCommitment,proto3" json:"MsgShareCommitment,omitempty"`
}

func (m *MsgUpdatePayForMessage) Reset()         { *m = MsgUpdatePayForMessage{} }
func (m *MsgUpdatePayForMessage) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePayForMessage) ProtoMessage()    {}
func (*MsgUpdatePayForMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_aed08664803ce2f6, []int{2}
}
func (m *MsgUpdatePayForMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePayForMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePayForMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePayForMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePayForMessage.Merge(m, src)
}
func (m *MsgUpdatePayForMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePayForMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePayForMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePayForMessage proto.InternalMessageInfo

func (m *MsgUpdatePayForMessage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdatePayForMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgUpdatePayForMessage) GetTxType() uint32 {
	if m != nil {
		return m.TxType
	}
	return 0
}

func (m *MsgUpdatePayForMessage) GetTxFee() uint64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

func (m *MsgUpdatePayForMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgUpdatePayForMessage) GetMsgNamespaceID() []byte {
	if m != nil {
		return m.MsgNamespaceID
	}
	return nil
}

func (m *MsgUpdatePayForMessage) GetMsgSize() uint64 {
	if m != nil {
		return m.MsgSize
	}
	return 0
}

func (m *MsgUpdatePayForMessage) GetMsgShareCommitment() []byte {
	if m != nil {
		return m.MsgShareCommitment
	}
	return nil
}

type MsgDeletePayForMessage struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeletePayForMessage) Reset()         { *m = MsgDeletePayForMessage{} }
func (m *MsgDeletePayForMessage) String() string { return proto.CompactTextString(m) }
func (*MsgDeletePayForMessage) ProtoMessage()    {}
func (*MsgDeletePayForMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_aed08664803ce2f6, []int{3}
}
func (m *MsgDeletePayForMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeletePayForMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeletePayForMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeletePayForMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeletePayForMessage.Merge(m, src)
}
func (m *MsgDeletePayForMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeletePayForMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeletePayForMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeletePayForMessage proto.InternalMessageInfo

func (m *MsgDeletePayForMessage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeletePayForMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*PayForMessage)(nil), "lazyledger.lazyledgerapp.lazyledgerapp.PayForMessage")
	proto.RegisterType((*MsgCreatePayForMessage)(nil), "lazyledger.lazyledgerapp.lazyledgerapp.MsgCreatePayForMessage")
	proto.RegisterType((*MsgUpdatePayForMessage)(nil), "lazyledger.lazyledgerapp.lazyledgerapp.MsgUpdatePayForMessage")
	proto.RegisterType((*MsgDeletePayForMessage)(nil), "lazyledger.lazyledgerapp.lazyledgerapp.MsgDeletePayForMessage")
}

func init() { proto.RegisterFile("lazyledgerapp/PayForMessage.proto", fileDescriptor_aed08664803ce2f6) }

var fileDescriptor_aed08664803ce2f6 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x93, 0x31, 0x4f, 0xfa, 0x40,
	0x18, 0xc6, 0xb9, 0x02, 0xe5, 0xff, 0xbf, 0x08, 0xc3, 0x85, 0x90, 0x8b, 0x43, 0x53, 0x19, 0x48,
	0x17, 0xdb, 0xc1, 0xcd, 0x11, 0x08, 0x89, 0x43, 0x89, 0xa9, 0x75, 0x71, 0x3b, 0xda, 0x37, 0x47,
	0x13, 0xca, 0x35, 0x6d, 0x4d, 0x28, 0x9f, 0xc2, 0x8f, 0xe5, 0xc8, 0xe8, 0x68, 0x60, 0x71, 0x73,
	0x75, 0x34, 0xbd, 0x4a, 0xb0, 0x06, 0x15, 0x1d, 0xdd, 0xde, 0xe7, 0xe9, 0xfb, 0xbc, 0xe9, 0x2f,
	0x97, 0x07, 0x9f, 0xcc, 0xd8, 0x32, 0x9b, 0x81, 0xcf, 0x21, 0x66, 0x51, 0x64, 0x5d, 0xb2, 0x6c,
	0x24, 0x62, 0x1b, 0x92, 0x84, 0x71, 0x30, 0xa3, 0x58, 0xa4, 0x82, 0xf4, 0x76, 0x2b, 0x66, 0x69,
	0xbb, 0xac, 0x8e, 0xdb, 0x5c, 0x70, 0x21, 0x23, 0x56, 0x3e, 0x15, 0xe9, 0xee, 0x33, 0xc2, 0xcd,
	0xd2, 0x55, 0x42, 0x71, 0xc3, 0x8b, 0x81, 0xa5, 0x22, 0xa6, 0x48, 0x47, 0xc6, 0x7f, 0x67, 0x2b,
	0x49, 0x0b, 0x2b, 0x81, 0x4f, 0x15, 0x69, 0x2a, 0x81, 0x4f, 0x3a, 0x58, 0x75, 0x17, 0x6e, 0x16,
	0x01, 0xad, 0xea, 0xc8, 0x68, 0x3a, 0x6f, 0x8a, 0xb4, 0x71, 0xdd, 0x5d, 0x8c, 0x00, 0x68, 0x4d,
	0x47, 0x46, 0xcd, 0x29, 0x44, 0xee, 0x8e, 0xc5, 0xdc, 0x03, 0x5a, 0x2f, 0x5c, 0x29, 0x48, 0x0f,
	0xb7, 0xec, 0x84, 0x8f, 0x59, 0x08, 0x49, 0xc4, 0x3c, 0xb8, 0x18, 0x52, 0x55, 0x47, 0xc6, 0x91,
	0xf3, 0xc1, 0xcd, 0xff, 0xca, 0x4e, 0xf8, 0x55, 0xb0, 0x04, 0xda, 0x90, 0xf9, 0xad, 0x24, 0x26,
	0x26, 0xf9, 0x38, 0x65, 0x31, 0x0c, 0x44, 0x18, 0x06, 0x69, 0x08, 0xf3, 0x94, 0xfe, 0x93, 0x57,
	0xf6, 0x7c, 0xe9, 0x3e, 0x21, 0xdc, 0xb1, 0x13, 0x3e, 0xc8, 0xa1, 0xe0, 0x50, 0xf4, 0x1d, 0xaa,
	0xb2, 0x1f, 0xb5, 0xba, 0x17, 0xb5, 0xf6, 0x35, 0x6a, 0xfd, 0x3b, 0x54, 0xf5, 0x10, 0xd4, 0xc6,
	0xa7, 0xa8, 0x2f, 0x05, 0xea, 0x75, 0xe4, 0xff, 0x00, 0xf5, 0x6f, 0xbc, 0x72, 0x5f, 0x92, 0x0f,
	0x61, 0x06, 0xbf, 0x26, 0xef, 0xbb, 0xf7, 0x6b, 0x0d, 0xad, 0xd6, 0x1a, 0x7a, 0x5c, 0x6b, 0xe8,
	0x6e, 0xa3, 0x55, 0x56, 0x1b, 0xad, 0xf2, 0xb0, 0xd1, 0x2a, 0x37, 0xe7, 0x3c, 0x48, 0xa7, 0xb7,
	0x13, 0xd3, 0x13, 0xa1, 0xb5, 0x6b, 0xd9, 0xbb, 0xf1, 0x34, 0x6f, 0xeb, 0xc2, 0x2a, 0xb7, 0x37,
	0xcd, 0x22, 0x48, 0x26, 0xaa, 0x2c, 0xde, 0xd9, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xab, 0xac,
	0xb4, 0x9a, 0xdb, 0x03, 0x00, 0x00,
}

func (m *PayForMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayForMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayForMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgShareCommitment) > 0 {
		i -= len(m.MsgShareCommitment)
		copy(dAtA[i:], m.MsgShareCommitment)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.MsgShareCommitment)))
		i--
		dAtA[i] = 0x42
	}
	if m.MsgSize != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.MsgSize))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MsgNamespaceID) > 0 {
		i -= len(m.MsgNamespaceID)
		copy(dAtA[i:], m.MsgNamespaceID)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.MsgNamespaceID)))
		i--
		dAtA[i] = 0x32
	}
	if m.Nonce != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if m.TxFee != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.TxFee))
		i--
		dAtA[i] = 0x20
	}
	if m.TxType != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePayForMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePayForMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePayForMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgShareCommitment) > 0 {
		i -= len(m.MsgShareCommitment)
		copy(dAtA[i:], m.MsgShareCommitment)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.MsgShareCommitment)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MsgSize != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.MsgSize))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MsgNamespaceID) > 0 {
		i -= len(m.MsgNamespaceID)
		copy(dAtA[i:], m.MsgNamespaceID)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.MsgNamespaceID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Nonce != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if m.TxFee != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.TxFee))
		i--
		dAtA[i] = 0x18
	}
	if m.TxType != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePayForMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePayForMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePayForMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgShareCommitment) > 0 {
		i -= len(m.MsgShareCommitment)
		copy(dAtA[i:], m.MsgShareCommitment)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.MsgShareCommitment)))
		i--
		dAtA[i] = 0x42
	}
	if m.MsgSize != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.MsgSize))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MsgNamespaceID) > 0 {
		i -= len(m.MsgNamespaceID)
		copy(dAtA[i:], m.MsgNamespaceID)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.MsgNamespaceID)))
		i--
		dAtA[i] = 0x32
	}
	if m.Nonce != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if m.TxFee != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.TxFee))
		i--
		dAtA[i] = 0x20
	}
	if m.TxType != 0 {
		i = encodeVarintPayForMessage(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeletePayForMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeletePayForMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeletePayForMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPayForMessage(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPayForMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayForMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PayForMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovPayForMessage(uint64(m.TxType))
	}
	if m.TxFee != 0 {
		n += 1 + sovPayForMessage(uint64(m.TxFee))
	}
	if m.Nonce != 0 {
		n += 1 + sovPayForMessage(uint64(m.Nonce))
	}
	l = len(m.MsgNamespaceID)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	if m.MsgSize != 0 {
		n += 1 + sovPayForMessage(uint64(m.MsgSize))
	}
	l = len(m.MsgShareCommitment)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	return n
}

func (m *MsgCreatePayForMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovPayForMessage(uint64(m.TxType))
	}
	if m.TxFee != 0 {
		n += 1 + sovPayForMessage(uint64(m.TxFee))
	}
	if m.Nonce != 0 {
		n += 1 + sovPayForMessage(uint64(m.Nonce))
	}
	l = len(m.MsgNamespaceID)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	if m.MsgSize != 0 {
		n += 1 + sovPayForMessage(uint64(m.MsgSize))
	}
	l = len(m.MsgShareCommitment)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	return n
}

func (m *MsgUpdatePayForMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovPayForMessage(uint64(m.TxType))
	}
	if m.TxFee != 0 {
		n += 1 + sovPayForMessage(uint64(m.TxFee))
	}
	if m.Nonce != 0 {
		n += 1 + sovPayForMessage(uint64(m.Nonce))
	}
	l = len(m.MsgNamespaceID)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	if m.MsgSize != 0 {
		n += 1 + sovPayForMessage(uint64(m.MsgSize))
	}
	l = len(m.MsgShareCommitment)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	return n
}

func (m *MsgDeletePayForMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPayForMessage(uint64(l))
	}
	return n
}

func sovPayForMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayForMessage(x uint64) (n int) {
	return sovPayForMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PayForMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayForMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayForMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayForMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFee", wireType)
			}
			m.TxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgNamespaceID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgNamespaceID = append(m.MsgNamespaceID[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgNamespaceID == nil {
				m.MsgNamespaceID = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSize", wireType)
			}
			m.MsgSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgShareCommitment = append(m.MsgShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgShareCommitment == nil {
				m.MsgShareCommitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayForMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePayForMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayForMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePayForMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePayForMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFee", wireType)
			}
			m.TxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgNamespaceID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgNamespaceID = append(m.MsgNamespaceID[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgNamespaceID == nil {
				m.MsgNamespaceID = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSize", wireType)
			}
			m.MsgSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgShareCommitment = append(m.MsgShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgShareCommitment == nil {
				m.MsgShareCommitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayForMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePayForMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayForMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePayForMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePayForMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFee", wireType)
			}
			m.TxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgNamespaceID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgNamespaceID = append(m.MsgNamespaceID[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgNamespaceID == nil {
				m.MsgNamespaceID = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSize", wireType)
			}
			m.MsgSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgShareCommitment = append(m.MsgShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgShareCommitment == nil {
				m.MsgShareCommitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayForMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeletePayForMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayForMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeletePayForMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeletePayForMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayForMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayForMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayForMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayForMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayForMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayForMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayForMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayForMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayForMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayForMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayForMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayForMessage = fmt.Errorf("proto: unexpected end of group")
)
